<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>me.xf</groupId>
  <artifactId>spring-javaconfig-web3.1</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  <name>spring-javaconfig-web3.1</name>
  <description>spring-javaconfig-web3.1</description>
  <properties>
		<!-- Common libs -->
		<spring_version>4.3.1.RELEASE</spring_version>
		<servlet_version>3.1.0</servlet_version>
		<freemarker_version>2.3.23</freemarker_version>
		<fastjson_version>1.2.11</fastjson_version>
		<aspectjrt_version>1.5.4</aspectjrt_version>
		<aspectjweaver_version>1.8.9</aspectjweaver_version>
		<cglib_version>3.2.2</cglib_version>
		<!-- Log libs -->
		<slf4j_version>1.7.21</slf4j_version>
		<log4j2_version>2.6.2</log4j2_version>
		<!-- log4j2 异步写日志的功能，必须引入Disruptor -->
		<disruptor_version>3.3.5</disruptor_version>
		<!-- Test libs -->
		<junit_version>4.11</junit_version>
		<!-- Build args -->
		<file_encoding>UTF-8</file_encoding>
		<skip_maven_deploy>false</skip_maven_deploy>
		<updateReleaseInfo>true</updateReleaseInfo>
		<project.build.sourceEncoding>${file_encoding}</project.build.sourceEncoding>
		<project.build.directory>/WEB-INF/</project.build.directory>
	
		<!-- for maven compiler plugin -->
		<maven_compiler_plugin_version>3.1</maven_compiler_plugin_version>
		<java_source_version>1.8</java_source_version>
		<java_target_version>1.8</java_target_version>
		<maven_source_plugin_version>3.0.0</maven_source_plugin_version>
		<maven_jar_plugin_version>2.4</maven_jar_plugin_version>
		<maven_war_plugin_version>2.6</maven_war_plugin_version>
		<maven_install_plugin_version>2.4</maven_install_plugin_version>
		<maven_deploy_plugin_version>2.7</maven_deploy_plugin_version>
		<maven_surefire_plugin_version>2.17</maven_surefire_plugin_version>
		<maven_dependency_plugin_version>2.8</maven_dependency_plugin_version>
		<maven_resources_plugin_version>2.7</maven_resources_plugin_version>
  </properties>
   
  <dependencies> 
  	<!-- servletApi -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${servlet_version}</version>
		</dependency>
		<!-- spring引入 spring begin -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring_version}</version>
		</dependency> 
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring_version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring_version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring_version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring_version}</version>
		</dependency>  
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${spring_version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring_version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-websocket</artifactId>
			<version>${spring_version}</version>
		</dependency>
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-messaging</artifactId>
		    <version>${spring_version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
			<version>${spring_version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring_version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring_version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring_version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring_version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
			<version>${spring_version}</version>
		</dependency>
		<!-- spring end -->
		<!-- log4j2+slf4j 日子引入 -->
		<!-- Logging use log4j2-->  
        <dependency>  
            <groupId>org.slf4j</groupId>  
            <artifactId>slf4j-api</artifactId>  
            <version>${slf4j_version}</version>  
            <exclusions>  
		        <exclusion>  
		            <groupId>org.slf4j</groupId>  
		            <artifactId>slf4j-log4j12</artifactId>  
		        </exclusion>  
		        <exclusion>  
		            <groupId>log4j</groupId>  
		            <artifactId>log4j</artifactId>  
		        </exclusion>  
		    </exclusions>  
        </dependency>  
        <!--核心log4j2jar包-->  
        <dependency>  
            <groupId>org.apache.logging.log4j</groupId>  
            <artifactId>log4j-api</artifactId>  
            <version>${log4j2_version}</version>  
        </dependency>  
        <dependency>  
            <groupId>org.apache.logging.log4j</groupId>  
            <artifactId>log4j-core</artifactId>  
            <version>${log4j2_version}</version>  
        </dependency>  
        <!--用于与slf4j保持桥接-->  
        <dependency>  
            <groupId>org.apache.logging.log4j</groupId>  
            <artifactId>log4j-slf4j-impl</artifactId>  
            <version>${log4j2_version}</version>  
        </dependency>  
        <!--web工程需要包含log4j-web，非web工程不需要-->  
        <dependency>  
            <groupId>org.apache.logging.log4j</groupId>  
            <artifactId>log4j-web</artifactId>  
            <version>${log4j2_version}</version>  
            <scope>runtime</scope>  
        </dependency>  
        <!--需要使用log4j2的AsyncLogger需要包含disruptor-->  
        <dependency>  
            <groupId>com.lmax</groupId>  
            <artifactId>disruptor</artifactId>  
            <version>${disruptor_version}</version>  
        </dependency> 
		<!-- fastjson 引入 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>${fastjson_version}</version>
		</dependency>
		<!-- freemarker 引入 -->
		<dependency>
			<groupId>org.freemarker</groupId>
			<artifactId>freemarker</artifactId>
			<version>${freemarker_version}</version>
		</dependency> 
		
		<!-- spring aop 注解包 引入 --> 
		<dependency> 
			<groupId>org.aspectj</groupId> 
			<artifactId>aspectjrt</artifactId>
			<version>${aspectjrt_version}</version>
		</dependency>

		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${aspectjweaver_version}</version>
		</dependency>
		<!-- 动态代理 引入 -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>${cglib_version}</version>
		</dependency>
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib-nodep</artifactId>
			<version>${cglib_version}</version>
		</dependency>
		<!-- apache commons begin -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3.1</version>
		</dependency>
		<!-- 单元测试 -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit_version}</version>
			<scope>test</scope>
		</dependency>
  </dependencies>
  <build>
		<defaultGoal>compile</defaultGoal>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>${maven_war_plugin_version}</version>
				<configuration> 
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<webResources>
						<resource>
							<!-- this is relative to the pom.xml directory -->
							<directory>WebContent</directory>
						</resource>
					</webResources>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven_compiler_plugin_version}</version>
				<configuration>
					<source>${java_source_version}</source>
					<target>${java_target_version}</target>
					<encoding>${file_encoding}</encoding>  <!-- “编码 GBK 的不可映射字符”问题的解决 -->
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven_surefire_plugin_version}</version>
				<configuration>
					<skip>true</skip>  <!-- 略过单元测试 -->
					<testFailureIgnore>true</testFailureIgnore> <!-- 当Maven 遇到一个测试失败，它默认的行为是停止当前的构建。 如果你希望继续构建项目，即使 Surefire 插件遇到了失败的单元测试，你就需要设置 
						Surefire 的testFailureIgnore 这个配置属性为 true -->
				</configuration>
			</plugin>


			<!-- 把依赖的jar包拷到lib目录下 -->

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>${maven_dependency_plugin_version}</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
						</configuration>
					</execution>
				</executions>
			</plugin>


			<!-- 把配置文件拷到和jar包同一个路径下 -->
			<!-- 以utf-8编码拷贝配置文件，拷贝过程中是可以做变量替换的，也就是说你的配置文件可以是个模板，里面的${}所包含的内容是可以拷贝过程中替换的 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven_resources_plugin_version}</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<encoding>UTF-8</encoding>
							<outputDirectory>${project.build.directory}</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources/</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>
</project>